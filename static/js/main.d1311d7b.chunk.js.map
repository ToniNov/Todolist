{"version":3,"sources":["serviceWorker.ts","features/CommonActions/App.ts","utils/redux-utils.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Auth/selectors.tsx","utils/error-utils.ts","api/todolists-api.ts","features/Auth/auth-reducer.ts","features/Auth/Login.tsx","features/Auth/index.tsx","features/Application/selectors.tsx","features/Application/application-reducer.ts","features/Application/index.tsx","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","api/types.ts","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/index.tsx","app/App.tsx","app/reducers.ts","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","appActions","setAppStatus","createAction","setAppError","useAppDispatch","useDispatch","useActions","actions","dispatch","useMemo","bindActionCreators","Alert","props","elevation","variant","ErrorSnackbar","error","useSelector","state","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","selectIsLoggedIn","auth","isLoggedIn","handleAsyncServerAppError","data","thunkAPI","showError","messages","length","status","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","i","login","createAsyncThunk","param","res","resultCode","logout","asyncActions","slice","createSlice","name","initialState","reducers","setIsLoggedIn","action","payload","value","extraReducers","builder","addCase","fulfilled","reducer","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","authActions","resultAction","rejected","setFieldError","field","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","type","FormControlLabel","control","Checkbox","checked","Button","color","authReducer","selectStatus","selectIsInitialized","isInitialized","initializeApp","appReducer","fetchTodolists","todolists","removeTodolist","changeTodolistEntityStatus","addTodolist","todolist","changeTodolistTitle","changeTodolistFilter","index","findIndex","tl","filter","entityStatus","map","splice","unshift","fetchTasks","tasks","items","removeTask","addTask","updateTask","getState","task","find","t","apiModel","deadline","description","priority","startDate","asyncTodolistsActions","forEach","todoListId","TaskStatuses","TaskPriorities","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","style","marginLeft","AddBox","EditableSpan","console","log","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","tasksActions","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","Completed","New","onTitleChangeHandler","newValue","key","className","position","top","right","size","Delete","fontSize","Todolist","demo","todolistsActions","useEffect","addTaskCallback","helper","thunk","errorMessage","changeTodolistTitleCallback","onFilterButtonClickHandler","buttonFilter","tasksForTodolist","renderFilterButton","textButton","Paper","padding","display","justifyContent","fontWeight","paddingTop","TodolistsList","addTodolistCallback","spacing","flexWrap","overflowX","allTodolistTasks","width","todolistsAsyncActions","todolistsSlice","tasksAsyncActions","tasksSlice","todolistsReducer","tasksReducer","App","appSelectors","authSelectors","logoutHandler","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d1311d7b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createAction} from '@reduxjs/toolkit'\r\nimport {RequestStatusType} from '../Application/application-reducer'\r\n\r\n\r\nconst setAppStatus = createAction<{status: RequestStatusType}>('appActions/setAppStatus')\r\nconst setAppError = createAction<{error: string | null}>('appActions/setAppError')\r\n\r\nexport const appActions = {\r\n    setAppStatus,\r\n    setAppError\r\n}\r\n","import {useDispatch} from 'react-redux'\r\nimport {AppDispatchType} from './types'\r\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux'\r\nimport {useMemo} from 'react'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n\r\n    return boundActions\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {appActions} from \"../../features/CommonActions/App\";\r\nimport {AppRootStateType} from \"../../utils/types\";\r\nimport {useActions} from \"../../utils/redux-utils\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n    const {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppError({error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {AppRootStateType} from \"../../utils/types\";\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn;","import {AxiosError} from \"axios\";\r\nimport {appActions} from '../features/CommonActions/App'\r\nimport {ResponseTypeApi} from \"../api/types\";\r\n\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseTypeApi<D>,\r\n                                             thunkAPI: ThunkAPIType,\r\n                                             showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError,\r\n                                              thunkAPI: ThunkAPIType,\r\n                                              showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}\r\n","import axios from 'axios'\r\nimport {GetTasksResponse, LoginParamsType,ResponseTypeApi, TaskType, TodolistType, UpdateTaskModelType} from \"./types\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '8167777a-ea65-4ab7-8aca-994fc49b12df'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseTypeApi<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseTypeApi>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseTypeApi>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseTypeApi>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseTypeApi<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseTypeApi<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseTypeApi<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseTypeApi<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseTypeApi<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n\r\n","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\nimport {appActions} from \"../CommonActions/App\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../utils/error-utils\";\r\nimport {ThunkError} from \"../../utils/types\";\r\nimport {LoginParamsType} from \"../../api/types\";\r\nimport {authAPI} from \"../../api/todolists-api\";\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType, ThunkError>\r\n('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleAsyncServerAppError(res.data, thunkAPI)\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors});\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleAsyncServerNetworkError(error, thunkAPI)\r\n        return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined});\r\n    }\r\n});\r\n\r\nexport const logout\r\n    = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n            return;\r\n        } else {\r\n            handleAsyncServerAppError(res.data, thunkAPI)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleAsyncServerNetworkError(error, thunkAPI)\r\n        return thunkAPI.rejectWithValue({});\r\n    }\r\n});\r\n\r\nexport const asyncActions = {login, logout}\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value;\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(login.fulfilled, (state) => {\r\n            state.isLoggedIn = true;\r\n        })\r\n        builder.addCase(logout.fulfilled, (state) => {\r\n            state.isLoggedIn = false;\r\n        })\r\n    },\r\n});\r\n\r\nexport const authReducer = slice.reducer;\r\nexport const {setIsLoggedIn} = slice.actions;\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from 'formik'\r\nimport {useSelector} from 'react-redux'\r\nimport {login} from './auth-reducer'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from './selectors'\r\nimport {authActions} from './index'\r\nimport {useAppDispatch} from '../../utils/redux-utils'\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isLoggedIn = useSelector(selectIsLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const resultAction: any = await dispatch(authActions.login(values));\r\n\r\n            if  (login.rejected.match(resultAction)) {\r\n                if (resultAction.payload?.fieldsErrors?.length) {\r\n                    const error = resultAction.payload?.fieldsErrors[0];\r\n                    formikHelpers.setFieldError(error.field, error.error);\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"} />\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import * as authSelectors from './selectors'\r\nimport {Login} from \"./Login\";\r\nimport {asyncActions, slice} from './auth-reducer'\r\n\r\nconst authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n    authSelectors,\r\n    authActions,\r\n    Login,\r\n    authReducer\r\n};","import {AppRootStateType} from \"../../utils/types\";\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status;\r\nexport const selectIsInitialized =(state:AppRootStateType) => state.app.isInitialized;","import {authAPI} from '../../api/todolists-api'\r\nimport {setIsLoggedIn} from '../Auth/auth-reducer'\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {appActions} from '../CommonActions/App'\r\n\r\nexport const initializeApp =\r\n    createAsyncThunk('application/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedIn({value: true}));\r\n    } else {\r\n\r\n    }\r\n})\r\n\r\nexport const asyncActions = {initializeApp}\r\n\r\nexport const slice = createSlice({\r\n    name: 'application',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state, action) => {\r\n                state.isInitialized = true\r\n            })\r\n            .addCase(appActions.setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(appActions.setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n    }\r\n});\r\n\r\nexport const applicationReducer = slice.reducer;\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\n\r\n\r\n","import * as appSelectors from './selectors'\r\nimport {RequestStatusType as T1, slice} from './application-reducer'\r\nimport {asyncActions} from './application-reducer'\r\n\r\nconst appReducer = slice.reducer\r\nconst actions = slice.actions\r\n\r\nconst appActions = {\r\n    ...actions,\r\n    ...asyncActions\r\n}\r\n\r\nexport type RequestStatusType = T1\r\n\r\nexport {\r\n    appSelectors,\r\n    appReducer,\r\n    appActions\r\n}","import {todolistsAPI} from '../../api/todolists-api'\r\nimport {RequestStatusType,} from '../Application/application-reducer'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from \"../../utils/error-utils\";\r\nimport {appActions} from \"../CommonActions/App\";\r\nimport {ThunkError} from '../../utils/types';\r\nimport {TodolistType} from \"../../api/types\";\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nexport const fetchTodolists = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>\r\n('todolists/fetchTodolists', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const removeTodolist =\r\n    createAsyncThunk<{id:string}, string, ThunkError>('todolists/removeTodolist', async (todolistId, {dispatch}) => {\r\n        dispatch(setAppStatus({status: 'loading'}));\r\n        dispatch(changeTodolistEntityStatus({id: todolistId, status: 'loading'}));\r\n        const res = await todolistsAPI.deleteTodolist(todolistId);\r\n        dispatch(setAppStatus({status: 'succeeded'}));\r\n        return {id: todolistId};\r\n    });\r\n\r\nexport const addTodolist = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>\r\n('todolists/addTodolist', async (title: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}));\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title);\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}));\r\n            return {todolist: res.data.data.item};\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n});\r\n\r\nexport const changeTodolistTitle = createAsyncThunk('todolists/changeTodolistTitle', async (param: { id: string, title: string }, thunkAPI) => {\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title);\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}));\r\n            return {id: param.id, title: param.title};\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI);\r\n        }\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false);\r\n    }\r\n});\r\n\r\nexport const asyncActions = {addTodolist, changeTodolistTitle, fetchTodolists, removeTodolist}\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolist',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].filter = action.payload.filter;\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.status;\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodolists.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map((tl) => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        });\r\n        builder.addCase(removeTodolist.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        });\r\n        builder.addCase(addTodolist.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(changeTodolistTitle.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].title = action.payload.title\r\n        })\r\n    }\r\n});\r\n\r\nexport const todolistsReducer = slice.reducer;\r\n\r\nexport const {changeTodolistFilter, changeTodolistEntityStatus} = slice.actions;\r\n\r\n// types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n","import {todolistsAPI} from '../../api/todolists-api'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils'\r\nimport {asyncActions as asyncTodolistsActions} from './todolists-reducer'\r\nimport {AppRootStateType, ThunkError} from '../../utils/types'\r\nimport {TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from '../../api/types'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasks =\r\n    createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkError>\r\n    ('tasks/fetchTasks', async (todolistId, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}));\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId);\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}));\r\n        return {tasks, todolistId}\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI);\r\n    }\r\n});\r\n\r\nexport const removeTask =\r\n    createAsyncThunk<{ taskId: string, todolistId: string }, { taskId: string, todolistId: string }, ThunkError>\r\n    ('tasks/removeTask', async (param, thunkAPI) => {\r\n        const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId);\r\n        return {taskId: param.taskId, todolistId: param.todolistId};\r\n    });\r\n\r\nexport const addTask =\r\n    createAsyncThunk<TaskType, { title: string, todolistId: string }, ThunkError>\r\n    ('tasks/addTask', async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}));\r\n        try {\r\n            const res = await todolistsAPI.createTask(param.todolistId, param.title);\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}));\r\n                return res.data.data.item\r\n            } else {\r\n                handleAsyncServerAppError(res.data, thunkAPI, false);\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors});\r\n            }\r\n        } catch (error: any) {\r\n            return handleAsyncServerNetworkError(error, thunkAPI, false);\r\n        }\r\n    })\r\n\r\nexport const updateTask =\r\n    createAsyncThunk('tasks/updateTask',\r\n        async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string }, thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType;\r\n    const task = state.tasks[param.todolistId].find((t: any) => t.id === param.taskId);\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state');\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    };\r\n\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel);\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return param;\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI);\r\n        }\r\n    } catch (error: any) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI);\r\n    }\r\n})\r\n\r\nexport const asyncActions = {fetchTasks, removeTask, addTask, updateTask};\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(asyncTodolistsActions.addTodolist.fulfilled, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            .addCase(asyncTodolistsActions.removeTodolist.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(asyncTodolistsActions.fetchTodolists.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach((tl: any) => {\r\n                    state[tl.id] = []\r\n                })\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId].unshift(action.payload)\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormSubmitHelperType = { setError: (error: string) => void, setTitle: (title: string) => void}\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => Promise<any>\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = async () => {\r\n        if (title.trim() !== \"\") {\r\n            try {\r\n                await addItem(title,{setError,setTitle});\r\n                setTitle(\"\");\r\n            } catch (error) {\r\n                // @ts-ignore\r\n                setError(error.message)\r\n            }\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled} style={{marginLeft: \"5px\"}}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","export type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = { field: string; error: string }\r\nexport type ResponseTypeApi<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {tasksActions} from \"../../index\";\r\nimport {useActions} from \"../../../../utils/redux-utils\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/types\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const {updateTask, removeTask} = useActions(tasksActions)\r\n\r\n    const onClickHandler = useCallback(() => removeTask({\r\n        taskId: props.task.id,\r\n        todolistId: props.todolistId\r\n    }), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {status: newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New},\r\n            todolistId: props.todolistId,\r\n        });\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {title: newValue},\r\n            todolistId: props.todolistId,\r\n        });\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n        style={{position: \"relative\"}}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler} style={{position:\"absolute\", top: \"2px\", right: \"2px\"}} size={\"small\"}>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton, Paper, PropTypes} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {tasksActions, todolistsActions} from \"../index\";\r\nimport {useActions, useAppDispatch} from \"../../../utils/redux-utils\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/types\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const {changeTodolistFilter, removeTodolist, changeTodolistTitle} = useActions(todolistsActions)\r\n    const {fetchTasks} = useActions(tasksActions)\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        if (!props.tasks.length ){\r\n            fetchTasks(props.todolist.id)\r\n        }\r\n    }, [])\r\n\r\n    const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = tasksActions.addTask({title: title, todolistId: props.todolist.id})\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (tasksActions.addTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [props.todolist.id])\r\n\r\n    const removeTodolistCallback = () => {\r\n        removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitleCallback = useCallback((title: string) => {\r\n        changeTodolistTitle({id: props.todolist.id, title: title})\r\n    }, [props.todolist.id])\r\n\r\n    const onFilterButtonClickHandler = useCallback((buttonFilter: FilterValuesType) =>\r\n        changeTodolistFilter({filter: buttonFilter, id: props.todolist.id}), [props.todolist.id])\r\n\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const renderFilterButton = (buttonFilter: FilterValuesType,\r\n                                color: PropTypes.Color,\r\n                                textButton: string) => {\r\n        return (\r\n            <Button variant={props.todolist.filter === buttonFilter ? 'outlined' : 'text'}\r\n                    onClick={()=> onFilterButtonClickHandler(buttonFilter)}\r\n                    color={color}>{textButton}\r\n            </Button>\r\n        )\r\n    }\r\n\r\n    return <Paper style={{padding: \"10px\", position: \"relative\"}}>\r\n        <IconButton size={'small'}\r\n                    onClick={removeTodolistCallback}\r\n                    disabled={props.todolist.entityStatus === 'loading'}\r\n                    style={{position: \"absolute\", right: \"5px\",top: \"5\"}}\r\n        >\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n        <h3>\r\n            <EditableSpan value={props.todolist.title} onChange={changeTodolistTitleCallback}/>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskCallback} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}/>)\r\n            }\r\n            {!tasksForTodolist.length && <span style={{display:\"flex\", justifyContent: \"center\", padding:\"10px\" , fontWeight: \"bold\"}}>\r\n                Create you first task</span>}\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            {renderFilterButton( 'all','default',\"All\")}\r\n            {renderFilterButton( 'active','primary',\"Active\")}\r\n            {renderFilterButton( 'completed','secondary',\"Completed\")}\r\n        </div>\r\n    </Paper>\r\n})\r\n\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {TodolistDomainType} from './todolists-reducer'\r\nimport {TasksStateType} from './tasks-reducer'\r\nimport {Grid} from '@material-ui/core'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from \"../Auth/selectors\";\r\nimport {todolistsActions} from \"./index\";\r\nimport {AppRootStateType} from \"../../utils/types\";\r\nimport {useActions, useAppDispatch} from \"../../utils/redux-utils\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n    const {fetchTodolists} = useActions(todolistsActions)\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const addTodolistCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = todolistsActions.addTodolist(title)\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (todolistsActions.addTodolist.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        if (!todolists.length){\r\n            fetchTodolists()\r\n        }\r\n    }, [])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px' }}>\r\n            <AddItemForm addItem={addTodolistCallback}/>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{flexWrap: 'nowrap', overflowX: 'scroll'}}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <div style={{width: '300px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                demo={demo}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {asyncActions as todolistsAsyncActions, slice as todolistsSlice} from './todolists-reducer'\r\nimport {asyncActions as tasksAsyncActions, slice as tasksSlice} from './tasks-reducer'\r\nimport {TodolistsList} from './TodolistsList'\r\n\r\nconst todolistsActions ={\r\n    ...todolistsAsyncActions,\r\n    ...todolistsSlice.actions\r\n};\r\n\r\nconst tasksActions ={\r\n    ...tasksAsyncActions,\r\n    ...tasksSlice.actions\r\n};\r\n\r\nconst todolistsReducer  = todolistsSlice.reducer\r\nconst tasksReducer  = tasksSlice.reducer\r\n\r\nexport {\r\n    tasksActions,\r\n    todolistsActions,\r\n    TodolistsList,\r\n    todolistsReducer,\r\n    tasksReducer,\r\n\r\n};","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useSelector} from 'react-redux'\r\nimport {Route} from 'react-router-dom'\r\nimport {authActions, Login} from '../features/Auth'\r\nimport {authSelectors} from \"../features/Auth\";\r\nimport {appActions, appSelectors} from \"../features/Application\";\r\nimport {TodolistsList} from \"../features/TodolistsList\";\r\nimport {selectIsInitialized} from \"../features/Application/selectors\";\r\nimport {useActions} from \"../utils/redux-utils\";\r\n\r\ntype PropsType = {}\r\n\r\nfunction App(props: PropsType) {\r\n    const status = useSelector(appSelectors.selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n\r\n    const {logout} = useActions(authActions)\r\n    const {initializeApp} = useActions(appActions)\r\n\r\n    useEffect(() => {\r\n        if (!isInitialized) {\r\n            initializeApp()\r\n        }\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        logout()\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Route exact path={'/'} render={() => <TodolistsList demo={false}/>}/>\r\n                <Route path={'/login'} render={() => <Login/>}/>\r\n            </Container>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {combineReducers} from \"redux\";\r\nimport {appReducer} from \"../features/Application\";\r\nimport {authReducer} from \"../features/Auth\";\r\nimport {tasksReducer, todolistsReducer} from \"../features/TodolistsList\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\n\r\nexport const rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})","import thunkMiddleware from 'redux-thunk'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\nimport {rootReducer} from \"./reducers\";\r\n\r\n// непосредственно создаём store\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n// if (process.env.NODE_ENV === 'development' && module.hot) {\r\n//     module.hot.accept('./reducers'), () => {\r\n//         store.replaceReducer(rootReducer)\r\n//     }\r\n// }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\n\r\nconst rerenderEntireTree = ()=>{\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <App/>\r\n            </BrowserRouter>\r\n        </Provider>, document.getElementById('root'));\r\n}\r\n\r\nrerenderEntireTree()\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n// if (process.env.NODE_ENV === 'development' && module.hot) {\r\n//     module.hot.accept('./app/App'), () => {\r\n//         rerenderEntireTree()\r\n//     }\r\n// }"],"sourceRoot":""}